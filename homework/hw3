Теория
1) Список – последовательность элементов, объединенных в один контейнер. Главная особенность – они изменяемы.
Элементы списка индексируются, состоят в основном из однотипных данных, перебираются, сохраняют порядок.
1. Списки изменяются динамически (вы можете создать пустой список, потом добавить в него ряд элементов, затем удалить часть из них – и все это будет осуществляться в одном контейнере, относиться к одной и той же переменной);
2. К элементам списка можно получить доступ по индексу (начиная с нулевого). Индексация бывает и обратной, отрицательной (индекс -1 обозначает последний элемент списка, -2 – предпоследний и т.д.);
3. В списках может содержаться ряд элементов любых типов (числа, строки, другие списки …);
4. У списков имеется большое разнообразие методов, позволяющих осуществлять операции с ними (расширять, удалять элементы, очищать, сортировать);
5. Списки можно «резать», т.е. формировать более мелкие последовательности на основании имеющейся;
6. Значения элементов могут повторяться.

2) Как проверить наличие элемента в списке?

Есть 2 очевидных способа:

1. При помощи конструкции in:

Пример – IDE
lst = [1, 2, 3, 14, 33, 1, 1]
if 1 in lst:
____print('Есть')

Результат:
Есть

2. При помощи метода count:

Пример – IDE
lst = [1, 2, 3, 14, 33, 1, 1]
if lst.count(5):
____print('Есть')
else:
____print('Нет')

Результат:
Нет

3) Чем отличаются методы append() и extend()?

  Метод append() добавляет в конец текущего списка новый элемент.
Метод extend() добавляет в конец текущего списка новые элементы в распакованном виде.
Посмотрим отличия на примере.

Пример – IDE
lst = [1, 2, 3, 14, 33, 1, 1]
lst.extend('Добавка')
print(lst)

Результат:
[1, 2, 3, 14, 33, 1, 1, 'Д', 'о', 'б', 'а', 'в', 'к', 'а']

Пример – IDE
lst = [1, 2, 3, 14, 33, 1, 1]
lst.append('Добавка')
print(lst)

Результат:
[1, 2, 3, 14, 33, 1, 1, 'Добавка']

4) Какие параметры можно передавать при срезах списков?

Для срезов можно пользоваться функцией slice() или специальным сокращением, куда входит 3 параметра: начало среза (по умолчанию – первый элемент), конец среза (конечный член списка, не включая его), шаг (по умолчанию – 1, т.е. выбираем все элементы без пропусков).

Пример – IDE
h = [1, 2, 3, 14, 33, 1, 9]
print(h[slice(2, 6, 2)])

Результат:
[3, 33]

Т.е. создаем новый список начиная с элемента с индексом 2 (в нашем случае это цифра 3) вплоть до 6 элемента (не включая его) с шагом 2 (пропускаем каждое второе значение).
Часть или все параметры можно опускать в специальных сокращениях.

Пример – IDE
h = [1, 2, 3, 14, 33, 1, 9]
print(h[2:6:2])
print(h[::2])

Результат:
[3, 33]
[1, 3, 33, 9]

  
  5)Какие способы создания списка из символов строки вы знаете?

  
  Есть 3 часто применяемых варианта:

1. При помощи функции list():

Пример – IDE
text = 'Строка'
print(list(text))

Результат:
['С', 'т', 'р', 'о', 'к', 'а']

2. При помощи цикла for:

Пример – IDE
text = 'Строка'
new_list = []
for i in text:
____new_list.append(i)
print(new_list)

Результат:
['С', 'т', 'р', 'о', 'к', 'а']

3. При помощи генератора списков:

Пример – IDE
text = 'Строка'
new_list = [i for i in text]
print(new_list)

Результат:
['С', 'т', 'р', 'о', 'к', 'а']
  


Задачи
1)Что произойдет со списком lst1 в первом и втором случаях? Поясните результат.

Случай 1 – IDE
lst1 = [1, 2, 3, 14, 33, 1, 9]
lst2 = [1, 2, 3, 14, 33, 1, 9]
lst2.append(789)

Случай 2 – IDE
lst1 = [1, 2, 3, 14, 33, 1, 9]
lst2 = lst1
lst2.append(789)

2) Дан произвольный список. 
Представьте его в обратном порядке всеми возможными методами, минимум 2(Загуглить)

3)Напишите функцию change(lst), которая принимает список и меняет местами его первый и последний элемент. 
В исходном списке минимум 2 элемента.
print(change([1, 2, 3]))
print(change([1, 2, 3, 4, 5]))
print(change(['н', 'л', 'о', 'с']))

[3, 2, 1]
[5, 2, 3, 4, 1]
['с', 'л', 'о', 'н']

4)В ф-цию передается произвольный список чисел, найти самое большое из них, а затем делит его на длину списка. 
Подсказка
len(list1) - вернет длину списка

print(useless([1, 5, 77]))
print(useless([19, 8.3, -4, 11, 0, 5]))
print(useless([-33, -0.05, -4.18, 11.2, 13.12, 55, 7.1]))

Результат выполнения
25.666666666666668
3.1666666666666665
7.857142857142857
  
  5) Требуется создать функцию list_sort(lst), которая сортирует список чисел по убыванию их абсолютного значения.

print(list_sort([1, 5, 77]))
print(list_sort([19, 8.3, -4, 11, 0, 5]))
print(list_sort([-33, -0.05, -4.18, 11.2, 13.12, 55, 7.1]))

Результат выполнения

[77, 5, 1]
[19, 11, 8.3, 5, -4, 0]
[55, -33, 13.12, 11.2, 7.1, -4.18, -0.05]

6)На входе имеем список строк разной длины. 
Необходимо написать функцию all_eq(lst), которая вернет новый список из строк одинаковой длины. 
Длину итоговой строки определяем исходя из самой большой из них. 
Если конкретная строка короче самой длинной, дополнить ее нижними подчеркиваниями с правого края до требуемого количества символов.
Расположение элементов начального списка не менять.

Сначала необходимо определить длину каждой строки в списке и найти максимальную. Далее дополняем символы «_» к строкам, чья длина меньше.

  print(all_eq(['крот', 'белка', 'выхухоль']))
print(all_eq(['a', 'aa', 'aaa', 'aaaa', 'aaaaa']))
print(all_eq(['qweasdqweas', 'q', 'rteww', 'ewqqqqq']))

Результат выполнения
['крот____', 'белка___', 'выхухоль']
['a____', 'aa___', 'aaa__', 'aaaa_', 'aaaaa']
['qweasdqweas', 'q__________', 'rteww______', 'ewqqqqq____']
