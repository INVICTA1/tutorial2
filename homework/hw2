# Task2 to 03.10.2023
# Напишите функцию is_even(number), которая принимает целое число и возвращает True, если оно четное, и False, если нечетное.


# Task2 to 04.10.2023
# Написать функцию is_year_leap, принимающую 1 аргумент — год, и возвращающую True, если год високосный(leap year),
# и False иначе.
# Подсказака - високосный год делиться на 4 без остатка
# Hint - a leap year is divisible by 4 without a remainder


# Task3 to 05.10.2023
# Написать функцию square, принимающую 1 аргумент — сторону квадрата, и возвращающую 3 значения в строке
# (к примеру "периметр квадрата = 8, площадь квадрата = 4, диагональ квадрата = 2.2  ...   "):
# периметр квадрата(perimeter of a square),
# площадь квадрата(area of the square) и
# диагональ квадрата(diagonal of a square).
# Подсказака - что бы подставить переменную(variables) в строку нужно начать строку с f символа и
# обернуть variables в  braces - {}
perimeter = 8
area = 4
diagonal = 2.2
result = f"периметр квадрата = {perimeter}, площадь квадрата = {area}, диагональ квадрата = {diagonal}"
print(result)


# Task4 to 06.10.2023
# Напишите функцию sum_range(start, end), которая суммирует все целые числа от значения «start» до величины «end» включительно. 
# Если пользователь задаст первое число большее чем второе, просто поменяйте их местами.
Подсказка - используй встроенне функции range() и sum().(Загугли в google что и как они делают) 


# Task5 to 07.10.2023

Николай написал функцию is_alive(health), которая проверяет здоровье персонажа в игре. 
Если оно равно или меньше нуля, то функция возвращает False, в противном случае True.
К сожалению, функция не работает, так как ученик допустил в ней ряд ошибок. 
Исправьте их и проверьте работоспособность программы (в качестве аргумента всегда передается число). 

def is_alive(health):
    if:
        health < 0
        False
    else:
        return true

############### Hard Task
Составьте функцию season_events(number_of_month), которая принимает номер месяца вашего рождения и в зависимости от сезона печатает на выходе следующее:
«Вы родились в <НАЗВАНИЕ_МЕСЯЦА>. <ОПИСАНИЕ_СОБЫТИЙ>».

В качестве ОПИСАНИЯ_СОБЫТИЙ будет характеристика сезона: 
- для зимы «За окном падал белый снег»,
- для весны «Птицы пели прекрасные песни»,
- для лета «Солнце светило ярче чем когда-либо»,
- для осени «Урожай был невероятным».

Важно учесть, что пользователи могут ввести любой тип данных в качестве аргумента (не попадитесь на этом и предупредите о том, что «Требуется ввести реальный номер месяца»). 
############################
Example
season_events(33) - Требуется ввести реальный номер месяца
season_events('wq') - Требуется ввести реальный номер месяца
season_events(1) - Вы родились в Январе. За окном падал белый снег
season_events(7) - Вы родились в Июле. Солнце светило ярче чем когда-либо
season_events(10) - Вы родились в Июле. Солнце светило ярче чем когда-либо
season_events(5) - Вы родились в Мае. Птицы пели прекрасные песни

